
function ScriptDebugger() 
{
  var me = this;
  var driver = this.$p(.view-driver);
  
  //var breakpoints = [];

  var breakpointsList = this.$(.debugger-breakpoints);
  var stacktraceList = this.$(.debugger-stacktrace);
  var varsList = this.$(.debugger-vars); 
  var debuggerToolbar = this.$(.debugger-toolbar);  

  function updateBreakpointsList() {
    breakpointsList.clear();
    var breakpoints = driver.breakpoints || [];
    for( var (n,bp) in breakpoints ) {
      var url = bp.url; 
      breakpointsList.$append(<li res="{url}" line-no={bp.lineNo} value={n}><span.lineNo>{bp.lineNo}</span><span.path>{url /~ "/"}</span><span.file>{url %~ "/"}</span></li>);
    }
  }
  
  function updateStacktrace(stacktrace)
  {
    stacktraceList.clear();
    if(stacktrace)
      for( var (n,st) in stacktrace ) {
        var lineNo = st[0];
        var funcName = st[1] || "";
        var fileUrl = st[2];
        stacktraceList.$append(<li><span.lineNo>{lineNo}</span>
                                   <span.funcName>{funcName}</span>
                                   <span.path>{fileUrl /~ "/"}</span><span.file>/{fileUrl %~ "/"}</span></li>);
      }
  }
  
  function formatVal(varval) {
  
    if( varval === null )
      return ("null",false);
    else if( varval === undefined )
      return ("undefined",false);
 
    switch( typeof varval ) {
      case #boolean:
        return (varval.toString(),false);
      case #object:
        if(varval.cname && varval.cname != varval.vtype)
          return (String.printf("{...} (%s of %s)", varval.vtype, varval.cname), #object);
        else
          return (String.printf("{...} (%s)", varval.vtype), #object);
      case #array:
        return (String.printf("[...] (Array:%d)", varval.length), #array);
      case #date:
        return (varval.toISOString(), false);
      case #string:
      case #integer:
      case #float:
        return (JSON.stringify(varval), false);
      case #symbol: 
        return ("#" + varval.toString(), false);
      default:
        return (varval.toString(), false);
    }
  }
  
  function renderVars(list, props)
  {
    for( var (varname,varval) in props ) {
      var (caption, compound) = formatVal(varval);
      if( compound == #object) {
        list.$append(<dt>{varname}:</dt><dd.compound.object><caption>{ caption }</caption><dl></dl></dd>);
        list.last.data = varval.props;
      }
      else if( compound == #array) {
        list.$append(<dt>{varname}:</dt><dd.compound.array><caption>{ caption }</caption><dl></dl></dd>);
        list.last.data = varval;
      }
      else 
        list.$append(<dt>{varname}:</dt><dd>{ caption }</dd>);
    }
  }

  function updateVars(locals)
  {
    varsList.clear();
    if(locals)
      for( var frame in locals ) {
        renderVars(varsList,frame);
      }
  }
  
  varsList.subscribe("click","dd.compound > caption", function() {
    var cont = this.parent; 
    if(cont.state.expanded)
      cont.state.collapsed = true; 
    else {
      var dl = cont[1];
      if( dl.length == 0 && cont.data)
        renderVars( dl, cont.data );
      cont.state.expanded = true;
    }
    return true;
  });
  
  function showCodePosition(fileUrl,lineNo) {
    //driver.navigateToSource(fileUrl,lineNo);
    me.postEvent("navigate-to-source", 
      {
        url: fileUrl,
        lineNo: lineNo,
        setCurrent:true 
      });
  }
  
 
  driver.on("breakpoint-list-change",function(evt) {
    updateBreakpointsList();
  });
 
  var debugCommand = 0;

  // attach breakpointHitHandler to the driver:
  
  driver.breakpointHitHandler = function(inFile,onLine,envData)
  { 
    me.postEvent("debugger-enter");
    me.postEvent("ensure-visible");

    debuggerToolbar.state.disabled = false;
    debuggerToolbar.state.focus = true;
    
    //me.timer(100ms, function() {debuggerToolbar.state.focus = true;});

    showCodePosition(inFile, onLine);
    updateStacktrace(envData.stacktrace);
    updateVars(envData.locals);
	
    debugCommand = 0;
    // run modal loop until we get next debugCommand response
    while(!debugCommand && driver.active) 
      view.doEvent();
      
    me.postEvent("debugger-leave");

    //stdout.println("scriptDebugger_breakpointHit, got it");
    if(driver.active) {
      updateStacktrace(null);
      updateVars(null);
      debuggerToolbar.state.disabled = true;
      driver.sendBreakpointHitResponse(debugCommand);
    } else {
      driver.sendBreakpointHitResponse(DEBUG_COMMAND.CONTINUE);
    }
  }
  
  me.$(.debug-continue).onClick = function() { debugCommand = DEBUG_COMMAND.CONTINUE; }
  me.$(.debug-step-in).onClick = function() { debugCommand = DEBUG_COMMAND.STEP_INTO; }
  me.$(.debug-step-over).onClick = function() { debugCommand = DEBUG_COMMAND.STEP_OVER; }
  me.$(.debug-step-out).onClick = function() { debugCommand = DEBUG_COMMAND.STEP_OUT; }
  
  
}