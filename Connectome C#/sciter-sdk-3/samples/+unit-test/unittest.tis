function @unittest(func, name) { UnitTest.add(func, name, this); }

function @unittestGroup(func, name) { UnitTest.addGroup(func, name); }

namespace UnitTest 
{
  var root = { name: "All", list:[] };
  var parent = root;
  var counter = 0;
    
  function add(func, name, ns) 
  { 
    stdout.println( name);
    //list.push { name:name, run: func, ns: ns, group: groupStack }; 
    parent.list.push { name:name, run: func, ns: ns, id: "t" + (++counter) }; 
  }    
  
  function addGroup(func, name) 
  { 
    // group is a function that contains other @unittest function declarations 
    var prevParent = parent;
    parent = { name:name, list: [] };
    prevParent.list.push(parent);
    func();
    parent = prevParent;
  }    
  
  function run(testIds, cbStart, cbEnd, cbFinished) 
  {
    function findTestById(id, parent = null) 
    {
      if(!parent) parent = root;
      for( var item in parent.list ) {
        if( item.id == id )  
          return item;
        if( item.list ) {
          var child = findTestById(id, item);
          if( child ) return child;
        }
      }
    }
  
    var fail = 0;
    var succ = 0; 
    
    var currentTestIndex = 0;
    
    function runOne() 
    {
      if(currentTestIndex >= testIds.length) {
        cbFinished(succ,fail);
        return;
      }
      var testId = testIds[currentTestIndex];
      var t = findTestById(testId);
      assert t : "shall always find something";
      ++currentTestIndex;
      try {
          cbStart(t,succ,fail,testIds.length);
          await t.run();
          ++succ;
          cbEnd(true,t,succ,fail,testIds.length);
        } catch(e) {
          ++fail;
          stderr.println(e.toString().trim());
          cbEnd(false,t,succ,fail,testIds.length);
        }
      self.post(runOne); // run next
    }
    // run first
    runOne();
  }    
  
  function present() 
  {
    const folder = __FILE__ /~ "/";
  
    var wnd = view.window {
      type  : View.TOOL_WINDOW,
      url   : folder + "/unittest-window.htm",
      state : View.WINDOW_SHOWN,
      alignment: 9,
      width : 400,
      height: 600,
      parameters: {
        testNs:   UnitTest,
        testRoot: root
      }
    };
  }    
  
  // aspect function
  function link() {
    // 'this' is the link
    
    var testUrl = this.attributes["href"];
    if( !testUrl ) return;
    
    function loadTest(data,status) {
      eval(data,self.ns);
    }
    function reportLoadTestError(err) {
      stderr.println(err);
    }
    
    view.request {
      type:#get,
      url: self.url(testUrl),
      output: #string,
      success: loadTest,
      error: reportLoadTestError
    };
  }
  
  // promisified timeout, returns promise
  function delay(ms) {
    var oath = promise();
    self.timer( ms, function() { oath(true, []);} ) // fulfill the promise 
    return oath;
  }
  
  // promisified timeout with condition, returns promise
  // the promise gets resolved either on:
  // - 'ms' timeout passed - returns false;
  // - 'cond' returns true - returns true;
  function until(ms, cond) 
  {
    var oath = promise();
    var timeout = false;
    
    self.timer( 20ms, function() { 
      if( timeout ) return;
      if( cond() )
        oath(true, [true]);  // fulfill the promise with true
      else 
        return true; // keep asking
    });
    
    self.timer( ms, 
      function() { 
        timeout = true;
        oath(true, [false]); // fulfill the promise with false, timeout passed
      }); 
      
    return oath;
  }
  
  
}

self.on("keydown", function(evt) {
  if( evt.ctrlKey && evt.shiftKey && (evt.keyCode == Event.VK_F5 || evt.keyCode == Event.VK_T) )
  {
    UnitTest.present();
    return true;
  }
});

