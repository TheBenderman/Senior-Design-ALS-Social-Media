namespace Ease // collection of easing functions of Robert Penner
{      
  // See: http://www.robertpenner.com/easing/
  
  // signature of methods: (current_time,	start_value, end_value-start_value,	total_time)

  function Linear( t, b = 0.0, c = 1.0, d = 1.0) 
    {
      return (t/d)*c + b;
    }
  function InQuad( t, b = 0.0, c = 1.0, d = 1.0) 
    {
      return c*(t/=d)*t + b;
    }
  function OutQuad( t, b = 0.0, c = 1.0, d = 1.0) 
    {
      return -c *(t/=d)*(t-2) + b;
    }
  function InOutQuad( t, b = 0.0, c = 1.0, d = 1.0) 
    {
      if ((t/=d/2) < 1) return c/2*t*t + b;
      return -c/2 * ((--t)*(t-2) - 1) + b;
    }
  function InCubic( t, b = 0.0, c = 1.0, d = 1.0) 
    {
      return c*(t/=d)*t*t + b;
    }
  function OutCubic( t, b = 0.0, c = 1.0, d = 1.0) 
    {
      return c*((t=t/d-1)*t*t + 1) + b;
    }
  function InOutCubic( t, b = 0.0, c = 1.0, d = 1.0) 
    {
      if ((t/=d/2) < 1) return c/2*t*t*t + b;
      return c/2*((t-=2)*t*t + 2) + b;
    }
  function InQuart( t, b = 0.0, c = 1.0, d = 1.0) 
    {
      return c*(t/=d)*t*t*t + b;
    }
  function OutQuart ( t, b = 0.0, c = 1.0, d = 1.0) 
    {
      return -c * ((t=t/d-1)*t*t*t - 1) + b;
    }
  function InOutQuart ( t, b = 0.0, c = 1.0, d = 1.0) 
    {
      if ((t/=d/2) < 1) return c/2*t*t*t*t + b;
      return -c/2 * ((t-=2)*t*t*t - 2) + b;
    }
  function InQuint ( t, b = 0.0, c = 1.0, d = 1.0) 
    {
      return c*(t/=d)*t*t*t*t + b;
    }
  function OutQuint ( t, b = 0.0, c = 1.0, d = 1.0) 
    {
      return c*((t=t/d-1)*t*t*t*t + 1) + b;
    }
  function InOutQuint( t, b = 0.0, c = 1.0, d = 1.0) 
    {
      if ((t/=d/2) < 1) return c/2*t*t*t*t*t + b;
      return c/2*((t-=2)*t*t*t*t + 2) + b;
    }
  function InSine( t, b = 0.0, c = 1.0, d = 1.0) 
    {
      return -c * Math.cos(t/d * (Math.PI/2)) + c + b;
    }
  function OutSine( t, b = 0.0, c = 1.0, d = 1.0) 
    {
      return c * Math.sin(t/d * (Math.PI/2)) + b;
    }
  function InOutSine( t, b = 0.0, c = 1.0, d = 1.0) 
    {
      return -c/2 * (Math.cos(Math.PI*t/d) - 1) + b;
    }
  function InExpo( t, b = 0.0, c = 1.0, d = 1.0) 
    {
      return (t==0) ? b : c * Math.pow(2, 10 * (t/d - 1)) + b;
    }
  function OutExpo( t, b = 0.0, c = 1.0, d = 1.0) 
    {
      return (t==d) ? b+c : c * (-Math.pow(2, -10 * t/d) + 1) + b;
    }
  function InOutExpo( t, b = 0.0, c = 1.0, d = 1.0) 
    {
      if (t==0) return b;
      if (t==d) return b+c;
      if ((t/=d/2) < 1) return c/2 * Math.pow(2, 10 * (t - 1)) + b;
      return c/2 * (-Math.pow(2, -10 * --t) + 2) + b;
    }
  function InCirc( t, b = 0.0, c = 1.0, d = 1.0) 
    {
      return -c * (Math.sqrt(1 - (t/=d)*t) - 1) + b;
    }
  function OutCirc( t, b = 0.0, c = 1.0, d = 1.0) 
    {
      return c * Math.sqrt(1 - (t=t/d-1)*t) + b;
    }
  function InOutCirc( t, b = 0.0, c = 1.0, d = 1.0) 
    {
      if ((t/=d/2) < 1) return -c/2 * (Math.sqrt(1 - t*t) - 1) + b;
      return c/2 * (Math.sqrt(1 - (t-=2)*t) + 1) + b;
    }
  function InElastic( t, b = 0.0, c = 1.0, d = 1.0) 
    {
      var s=1.70158;var p=0;var a=c;
      if (t==0) return b;  if ((t/=d)==1) return b+c;  if (!p) p=d*.3;
      if (a < Math.abs(c)) { a=c; s=p/4; }
      else s = p/(2*Math.PI) * Math.asin (c/a);
      return -(a*Math.pow(2,10*(t-=1)) * Math.sin( (t*d-s)*(2*Math.PI)/p )) + b;
    }
  function OutElastic( t, b = 0.0, c = 1.0, d = 1.0) 
    {
      var s=1.70158;var p=0;var a=c;
      if (t==0) return b;  if ((t/=d)==1) return b+c;  if (!p) p=d*.3;
      if (a < Math.abs(c)) { a=c; s=p/4; }
      else s = p/(2*Math.PI) * Math.asin (c/a);
      return a*Math.pow(2,-10*t) * Math.sin( (t*d-s)*(2*Math.PI)/p ) + c + b;
    }
  function InOutElastic( t, b = 0.0, c = 1.0, d = 1.0) 
    {
      var s=1.70158;var p=0;var a=c;
      if (t==0) return b;  if ((t/=d/2)==2) return b+c;  if (!p) p=d*(.3*1.5);
      if (a < Math.abs(c)) { a=c; s=p/4; }
      else s = p/(2*Math.PI) * Math.asin (c/a);
      if (t < 1) return -.5*(a*Math.pow(2,10*(t-=1)) * Math.sin( (t*d-s)*(2*Math.PI)/p )) + b;
      return a*Math.pow(2,-10*(t-=1)) * Math.sin( (t*d-s)*(2*Math.PI)/p )*.5 + c + b;
    }
  function InBack( t, b = 0.0, c = 1.0, d = 1.0, s = 1.70158) 
    {
      return c*(t/=d)*t*((s+1)*t - s) + b;
    }
  function OutBack( t, b = 0.0, c = 1.0, d = 1.0, s = 1.70158) 
    {
      return c*((t=t/d-1)*t*((s+1)*t + s) + 1) + b;
    }
  function InOutBack( t, b = 0.0, c = 1.0, d = 1.0, s = 1.70158) 
    {
      if ((t/=d/2) < 1) return c/2*(t*t*(((s*=(1.525))+1)*t - s)) + b;
      return c/2*((t-=2)*t*(((s*=(1.525))+1)*t + s) + 2) + b;
    }
  function OutBounce( t, b = 0.0, c = 1.0, d = 1.0) 
    {
      if ((t/=d) < (1/2.75)) 
        return c*(7.5625*t*t) + b;
      else if (t < (2/2.75))
        return c*(7.5625*(t-=(1.5/2.75))*t + .75) + b;
      else if (t < (2.5/2.75)) 
        return c*(7.5625*(t-=(2.25/2.75))*t + .9375) + b;
      else 
        return c*(7.5625*(t-=(2.625/2.75))*t + .984375) + b;
    }
  function InBounce( t, b = 0.0, c = 1.0, d = 1.0) 
    {
      return c - OutBounce ( d-t, 0, c, d) + b;
    }
  function InOutBounce( t, b = 0.0, c = 1.0, d = 1.0) 
    {
      if (t < d/2) return InBounce ( t*2, 0, c, d ) * .5 + b;
      return OutBounce ( t*2-d, 0, c, d ) * .5 + c*.5 + b;
    }
} //namespace Ease 
