  
class ColorChooser: Behavior
{
  // this is a callback method, client shall set its own handler to the instance.
  // color changed by selection on popup or through value property
  function onValueChanged( colorChooser )
  {
    stdout.printf("Color selected: %s\n", colorChooser.value );
  }
  
  // this is a callback method, client shall set its own handler to the instance.
  // click here is either apply button clicked or color changed by selection on popup 
  function onClick( colorChooser )
  {
    stdout.printf("Color applied: %s\n", colorChooser.value );
  }
  
  // this behavior has been attached to the element, setup its shape.
  function attached()
  {
    this.html = "<button role='apply'><span.current-color /></button><button role='popup' />";
  }
  
  // get popup element, create it if needed
  function getPopupElement()
  { 
    var popup = self.select("head popup.color-selector");  
    if( !popup ) 
    {
      // We create popup.color-selector in head so it can be shared by multiple instances of this component.
      popup = new Element("popup"); 
      popup.attributes["class"] = "color-selector";
      var head = self.select("head");
      head.insert(popup);
      this.initPopup( popup );
    }
    return popup;
  }
  
  property value(strColor)
  {
    var img = this.select(".current-color");
    set
    {
      //stdout << " set =" << strColor << "\n";
      img.style["background-color"] = strColor;
      this.onValueChanged(this);
    }
    return img.style["background-color"];
  }
  
  function showPopup()
  {
      var pe = this.getPopupElement();
      this.popup( pe, 2); // show our popup underneath of this element
  }
  
  function onControlEvent(evt)
  {
    if( evt.type == Event.BUTTON_PRESS && evt.target.match("[role='popup']"))
    {
      this.showPopup();
      return true;
    }
    if( evt.type == Event.BUTTON_CLICK && evt.target.match("[role='apply']"))
    {
      this.onClick(this);
    } 
    return false;
  }
  
  // handler for mouse events on popup element
  function popupOnMouse(evt)
  {
    // Note 'this' here is our popup element, not button,
    // because we've atached this function to the popup element
    switch(evt.type)
    {
      case Event.MOUSE_DOWN:
        return true; // to prevent its handling in the button
      case Event.MOUSE_UP:
      {
        var cell = evt.target.selectParent("td"); // find td container
        if(cell) 
        {
          this.owner.value = cell.style["background-color"]; // notify our owner
          this.owner.onClick(this.owner);
        }
        this.state.popup = false; // hide popup
        return true; // to prevent its handling in the button
      }
    }
  }
  
  // will create a table with colors
  function initPopup(popup)
  {
    // web safe palette
    var colors = [  
      0x003300,0x333300,0x663300,0x993300,0xcc3300,0xff3300, 0x009900,0x339900,0x669900,0x999900,0xcc9900,0xff9900, 0x00ff00,0x33ff00,0x66ff00,0x99ff00,0xccff00,0xffff00,
      0x003333,0x333333,0x663333,0x993333,0xcc3333,0xff3333, 0x009933,0x339933,0x669933,0x999933,0xcc9933,0xff9933, 0x00ff33,0x33ff33,0x66ff33,0x99ff33,0xccff33,0xffff33,
      0x003366,0x333366,0x663366,0x993366,0xcc3366,0xff3366, 0x009966,0x339966,0x669966,0x999966,0xcc9966,0xff9966, 0x00ff66,0x33ff66,0x66ff66,0x99ff66,0xccff66,0xffff66,
      0x003399,0x333399,0x663399,0x993399,0xcc3399,0xff3399, 0x009999,0x339999,0x669999,0x999999,0xcc9999,0xff9999, 0x00ff99,0x33ff99,0x66ff99,0x99ff99,0xccff99,0xffff99,
      0x0033cc,0x3333cc,0x6633cc,0x9933cc,0xcc33cc,0xff33cc, 0x0099cc,0x3399cc,0x6699cc,0x9999cc,0xcc99cc,0xff99cc, 0x20f0cc,0x33ffcc,0x66ffcc,0x99ffcc,0xccffcc,0xffffcc,
      0x0033ff,0x3333ff,0x6633ff,0x9933ff,0xcc33ff,0xff33ff, 0x0099ff,0x3399ff,0x6699ff,0x9999ff,0xcc99ff,0xff99ff, 0x00ffff,0x33ffff,0x66ffff,0x99ffff,0xccffff,0xffffff,
      0x0000ff,0x3300ff,0x6600ff,0x9900ff,0xcc00ff,0xff00ff, 0x0066ff,0x3366ff,0x6666ff,0x9966ff,0xcc66ff,0xff66ff, 0x20c0ff,0x33ccff,0x66ccff,0x99ccff,0xccccff,0xffccff,
      0x0000cc,0x3300cc,0x6600cc,0x9900cc,0xcc00cc,0xff00cc, 0x0066cc,0x3366cc,0x6666cc,0x9966cc,0xcc66cc,0xff66cc, 0x00cccc,0x33cccc,0x66cccc,0x99cccc,0xcccccc,0xffcccc,
      0x000099,0x330099,0x660099,0x990099,0xcc0099,0xff0099, 0x006699,0x336699,0x666699,0x996699,0xcc6699,0xff6699, 0x00cc99,0x33cc99,0x66cc99,0x99cc99,0xcccc99,0xffcc99,
      0x000066,0x330066,0x660066,0x990066,0xcc0066,0xff0066, 0x006666,0x336666,0x666666,0x996666,0xcc6666,0xff6666, 0x00cc66,0x33cc66,0x66cc66,0x99cc66,0xcccc66,0xffcc66,
      0x000033,0x330033,0x660033,0x990033,0xcc0033,0xff0033, 0x006633,0x336633,0x666633,0x996633,0xcc6633,0xff6633, 0x00cc33,0x33cc33,0x66cc33,0x99cc33,0xcccc33,0xffcc33,
      0x000000,0x330000,0x660000,0x990000,0xcc0000,0xff0000, 0x006600,0x336600,0x666600,0x996600,0xcc6600,0xff6600, 0x00cc00,0x33cc00,0x66cc00,0x99cc00,0xcccc00,0xffcc00 ];
                                                                                                             
    var table = new Element("table");
    var i = 0;
    for(var r = 0; r < 12; ++r)
    {
      var row = new Element("tr");
      for(var c = 0; c < 18; ++c)
      {
        var cell = new Element("td");
        var c = colors[i++];
        var cs = String.printf( "#%02X%02X%02X", c & 0xff, (c >> 8) & 0xff, (c >> 16) & 0xff );
        cell.attributes["style"] = "background:"+cs;
        cell.attributes["title"] = cs;
        row.insert(cell);
      }
      table.insert( row );
    }
    popup.insert(table);
    popup.onMouse = this.popupOnMouse;
  }

}