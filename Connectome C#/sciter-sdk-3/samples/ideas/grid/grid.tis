//|
//| grid behavior, must be applied to tables.
//|
//| add style="overflow:auto" and fixedrows="1" if you need it scrollable
//|
//| NOTIFICATIONS:
//|   Row Click:
//|       calls this.onRowClick(rowElement) 
//|   Header Click:
//|       calls this.onHeaderClick(headerCellElement) 
//|

class Grid: Behavior
{
  // constants from /api/sciter-x-behavior.h(278) 
  
  const TABLE_HEADER_CLICK = 0x81;   // click on some cell in table header, 
                                     //     target = the cell, 
                                     //     reason = index of the cell (column number, 0..n)
  const TABLE_ROW_CLICK = 0x82;      // click on data row in the table, target is the row
                                     //     target = the row, 
                                     //     reason = index of the row (fixed_rows..n)
  const TABLE_ROW_DBL_CLICK = 0x83;  // mouse dbl click on data row in the table, target is the row
                                     //     target = the row, 
                                     //     reason = index of the row (fixed_rows..n)
                                     
  // Click on Header cell,
  // override it for particular grid instance
  // E.g. you may chose to reorder table using this column as a key.
  function onHeaderClick( headerCell )
    {
      this.postEvent(TABLE_HEADER_CLICK,headerCell.index, headerCell);
      return true;
    }
  
  // Click on some row 
  // override it for particular grid instance
  function onRowClick( row , reason)
    {
      this.postEvent(TABLE_ROW_CLICK,row.index, row);
      return true;
    }
  function onRowDoubleClick( row )
    {
      this.postEvent(TABLE_ROW_DBL_CLICK,row.index, row);
      return true;
    }
  
  
  // returns current row (if any)
  function getCurrentRow()
    {
      return this.$(tbody>tr:current);
    }
  
  // returns current column (if any)
  function getCurrentColumn()
  {
    return this.$(thead>:current); // return current cell in header row
  }
  
  
  // set current row
  function setCurrentRow( row, reason = #by_code, doubleClick = false )
    {
      // get previously selected row:
      var prev = this.getCurrentRow();
      if( prev )
      {
        if( prev === row && !doubleClick) return; // already here, nothing to do.
        prev.state.current = false; // drop state flag
      }
      row.state.current = true; 
      row.scrollToView();
     
      if( doubleClick )
        this.onRowDoubleClick(row,reason);
      else
        this.onRowClick(row,reason);
    }
  
  function setCurrentColumn( col )
    {
      // get previously selected column:
      var prev = this.getCurrentColumn();
      if( prev )
      {
        if( prev === col ) return; // already here, nothing to do.
        prev.state.current = false; // drop state flag
      }
      col.state.current = true; // set state flag
      col.scrollToView();
      this.onHeaderClick(col);
    }

  function sortRows( col )
  {
      var byColumn = col.index;
      var nowDesc = (col.attributes["sort"] || "desc") == "desc";
      ( this.$(thead [sort]) || col).attributes["sort"] = undefined; // drop any other sort order.
      if( nowDesc )
      {
        col.attributes["sort"] = "asc";
        this.body.sort( :r1,r2: r1[byColumn].text < r2[byColumn].text? -1:1);
      } else {
        col.attributes["sort"] = "desc";
        this.body.sort( :r1,r2: r1[byColumn].text > r2[byColumn].text? -1:1);
      }
  }

  
  function attached()
  {
    assert this.tag == "table" : "wrong element type for grid, table expected";
    this.body = this.$(:root>tbody);
    assert this.body : "Grid require <tbody> element";
  }
  
  function onMouse(evt)
    {
      if( (evt.type != Event.MOUSE_DOWN) && (evt.type != Event.MOUSE_DCLICK) )
          return false;
      
      if(!evt.mainButton) 
          return false;
         
      // auxiliary function, returns row this target element belongs to
      function targetRow( target ) { return target.$p(tbody>tr); }
         
      // auxiliary function, returns row this target element belongs to
      function targetHeaderCell(target) { return target.$p(thead>tr>th); }
          
      if(var row = targetRow(evt.target)) // click on the row
        this.setCurrentRow(row, #by_mouse, evt.type == Event.MOUSE_DCLICK);
      else if( var headerCell = targetHeaderCell(evt.target) )  
      {
        this.setCurrentColumn( headerCell ); // click on the header cell
        if(evt.type != Event.MOUSE_DCLICK && headerCell.$is(.sortable))
          this.sortRows(headerCell);
      }
            
      //return true; // as it is always ours then stop event bubbling
    }
  
  function onFocus(evt)
  {
      return ( evt.type == Event.GOT_FOCUS || evt.type == Event.LOST_FOCUS );
  }
  
  function onKey(evt)
    {
        
      if( evt.type != Event.KEY_DOWN )
          return false; // handling only KEY_DOWN
      
      //stdout.printf("onKey:%x\n",evt.keyCode);
      
      switch( evt.keyCode )
      {
        case Event.VK_DOWN:
          {
             var crow = this.getCurrentRow();
             var idx = crow? crow.index + 1 : 0;
             if( idx < this.body.length ) this.setCurrentRow(this.body[idx],#by_key);
          }
          return true;
          
        case Event.VK_UP:             
          {
             var crow = this.getCurrentRow();
             var idx = crow? crow.index - 1 : this.length - 1;
             if( idx >= 0 ) this.setCurrentRow(this.body[idx],#by_key);
          }
          return true;
  
        case Event.VK_PRIOR:
          {
             var y = this.body.scroll( #top ) - this.body.scroll( #height );
             var r;
             for( var i = this.body.length - 1; i >= 0; --i )
             {
                 var pr = r; r = this.body[i];
                 if( r.box( #top, #inner, #content ) < y ) 
                 {
                    // this row is further than scroll pos - height of scroll area 
                    this.setCurrentRow(pr? pr: r,#by_key); // to last fully visible
                    return true;
                 }
             }
             this.setCurrentRow(r,#by_key); // just in case
          }
          return true;
  
        case Event.VK_NEXT:
          {
             var y = this.body.scroll( #top ) + 2 * this.body.scroll( #height );
             var lastScrollable = this.body.length - 1;
             var r;
             for( var i = 0; i <= lastScrollable; ++i )
             {
                 var pr = r; r = this.body[i];
                 if( r.box( #bottom, #inner, #content ) > y ) 
                 {
                    // this row is further than scroll pos - height of scroll area 
                    this.setCurrentRow(pr? pr: r,#by_key); // to last fully visible
                    return true;
                 }
             }
             this.setCurrentRow(r,#by_key); // just in case
          }
          return true;
          
        case Event.VK_HOME:
          {
            if( this.body.length )
              this.setCurrentRow(this.body.first,#by_key); 
          }
          return true;
  
        case Event.VK_END:
          {
            if( this.body.length )
              this.setCurrentRow(this.body.last,#by_key); 
          }
          return true;
      }
      return false; 
    }
  
}

